import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { distinctUntilChanged } from 'rxjs/operators';
import { BehaviorSubject, Subject } from 'rxjs';
var FixedSizeTableVirtualScrollStrategy = /** @class */ (function () {
    function FixedSizeTableVirtualScrollStrategy() {
        this.indexChange = new Subject();
        this.stickyChange = new Subject();
        this.renderedRangeStream = new BehaviorSubject({ start: 0, end: 0 });
        this.scrolledIndexChange = this.indexChange.pipe(distinctUntilChanged());
        this._dataLength = 0;
    }
    Object.defineProperty(FixedSizeTableVirtualScrollStrategy.prototype, "dataLength", {
        get: function () {
            return this._dataLength;
        },
        set: function (value) {
            this._dataLength = value;
            this.onDataLengthChanged();
        },
        enumerable: true,
        configurable: true
    });
    FixedSizeTableVirtualScrollStrategy.prototype.attach = function (viewport) {
        this.viewport = viewport;
        this.viewport.renderedRangeStream.subscribe(this.renderedRangeStream);
        this.onDataLengthChanged();
    };
    FixedSizeTableVirtualScrollStrategy.prototype.detach = function () {
        this.indexChange.complete();
        this.stickyChange.complete();
        this.renderedRangeStream.complete();
    };
    FixedSizeTableVirtualScrollStrategy.prototype.onContentScrolled = function () {
        this.updateContent();
    };
    FixedSizeTableVirtualScrollStrategy.prototype.onDataLengthChanged = function () {
        if (this.viewport) {
            this.viewport.setTotalContentSize(this.dataLength * this.rowHeight + this.headerHeight + this.footerHeight);
        }
        this.updateContent();
    };
    FixedSizeTableVirtualScrollStrategy.prototype.onContentRendered = function () {
        // no-op
    };
    FixedSizeTableVirtualScrollStrategy.prototype.onRenderedOffsetChanged = function () {
        // no-op
    };
    FixedSizeTableVirtualScrollStrategy.prototype.scrollToIndex = function (index, behavior) {
        if (!this.viewport || !this.rowHeight) {
            return;
        }
        this.viewport.scrollToOffset((index - 1) * this.rowHeight + this.headerHeight);
    };
    FixedSizeTableVirtualScrollStrategy.prototype.setConfig = function (configs) {
        var rowHeight = configs.rowHeight, headerHeight = configs.headerHeight, footerHeight = configs.footerHeight, bufferMultiplier = configs.bufferMultiplier;
        if (this.rowHeight === rowHeight
            && this.headerHeight === headerHeight
            && this.footerHeight === footerHeight
            && this.bufferMultiplier === bufferMultiplier) {
            return;
        }
        this.rowHeight = rowHeight;
        this.headerHeight = headerHeight;
        this.footerHeight = footerHeight;
        this.bufferMultiplier = bufferMultiplier;
        this.onDataLengthChanged();
    };
    FixedSizeTableVirtualScrollStrategy.prototype.updateContent = function () {
        if (!this.viewport || !this.rowHeight) {
            return;
        }
        var scrollOffset = this.viewport.measureScrollOffset();
        var amount = Math.ceil(this.viewport.getViewportSize() / this.rowHeight);
        var offset = Math.max(scrollOffset - this.headerHeight, 0);
        var buffer = Math.ceil(amount * this.bufferMultiplier);
        var skip = Math.round(offset / this.rowHeight);
        var index = Math.max(0, skip);
        var start = Math.max(0, index - buffer);
        var end = Math.min(this.dataLength, index + amount + buffer);
        var renderedOffset = start * this.rowHeight;
        this.viewport.setRenderedContentOffset(renderedOffset);
        this.viewport.setRenderedRange({ start: start, end: end });
        this.indexChange.next(index);
        this.stickyChange.next(renderedOffset);
    };
    FixedSizeTableVirtualScrollStrategy = __decorate([
        Injectable()
    ], FixedSizeTableVirtualScrollStrategy);
    return FixedSizeTableVirtualScrollStrategy;
}());
export { FixedSizeTableVirtualScrollStrategy };
//# sourceMappingURL=data:application/json;base64,